<?php
declare(strict_types=1);

require __DIR__ . '/../src/bootstrap.php';

use App\Controllers\AuthController;
use App\Controllers\ConfigController;
use App\Controllers\WithdrawalController;
use App\Controllers\NotificationController;
use App\Controllers\FileController;
use App\Controllers\CardsController;

// ---- Helpers de auth ----
function auth_user(): ?array {
    $hdr = $_SERVER['HTTP_AUTHORIZATION'] ?? '';
    if (!preg_match('/Bearer\s+(.*)$/i', $hdr, $m)) return null;
    try {
        $claims = App\Utils\Jwt::decode(trim($m[1]));
        return ['id' => (int)($claims['sub'] ?? 0), 'role' => $claims['role'] ?? 'user'];
    } catch (\Throwable $e) {
        return null;
    }
}
function require_auth(): array {
    $u = auth_user();
    if (!$u) json_response(['error' => 'No autorizado'], 401);
    return $u;
}
function require_admin(array $u): void {
    if (($u['role'] ?? 'user') !== 'admin') json_response(['error' => 'Prohibido'], 403);
}

// ---- Normaliza REQUEST_URI (evita null y rutas como //config) ----
$reqUri = $_SERVER['REQUEST_URI'] ?? '/';
if (!is_string($reqUri) || $reqUri === '') { $reqUri = '/'; }
$path = parse_url($reqUri, PHP_URL_PATH) ?? '/';
$path = '/' . ltrim($path, '/'); // garantiza un solo slash al inicio
$method = $_SERVER['REQUEST_METHOD'] ?? 'GET';

// ---- Servir archivos de /storage/* ----
if (strncmp($path, '/storage/', 9) === 0) {
    $file = __DIR__ . '/../' . ltrim($path, '/');
    if (is_file($file)) {
        $mime = mime_content_type($file);
        header('Content-Type: ' . $mime);
        readfile($file);
        exit;
    } else {
        http_response_code(404);
        exit;
    }
}

// ---- Rutas ----
if ($path === '/auth/register' && $method === 'POST') { AuthController::register(json_input()); }
if ($path === '/auth/login' && $method === 'POST') { AuthController::login(json_input()); }
if ($path === '/auth/me' && $method === 'GET') { $u = require_auth(); AuthController::me($u['id']); }
if ($path === '/auth/refresh' && $method === 'POST') { AuthController::refresh(); }
if ($path === '/auth/logout' && $method === 'POST') { AuthController::logout(); }
if ($path === '/_seed_admin' && $method === 'POST') { AuthController::seedAdmin(); }

if ($path === '/config' && $method === 'GET') { require_auth(); ConfigController::get(); }
if ($path === '/config' && $method === 'PATCH') { $u = require_auth(); require_admin($u); ConfigController::patch(json_input()); }

if ($path === '/withdrawals' && $method === 'GET') { $u = require_auth(); WithdrawalController::list($u['id'], $_GET, $u['role']==='admin'); }
if ($path === '/withdrawals' && $method === 'POST') { $u = require_auth(); WithdrawalController::create($u['id'], json_input()); }
if (preg_match('#^/withdrawals/(\d+)$#', $path, $m) && $method === 'PATCH') { $u = require_auth(); require_admin($u); WithdrawalController::updateStatus($u['id'], (int)$m[1], json_input()); }

if ($path === '/notifications' && $method === 'GET') { $u = require_auth(); NotificationController::list($u['id']); }
if (preg_match('#^/notifications/(\d+)/read$#', $path, $m) && $method === 'PATCH') { $u = require_auth(); NotificationController::markRead($u['id'], (int)$m[1]); }

if ($path === '/files/qr' && $method === 'POST') { $u = require_auth(); FileController::uploadQr($u['id']); }

if ($path === '/cards' && $method === 'GET') { $u = require_auth(); CardsController::list($u['id']); }
if ($path === '/cards' && $method === 'POST') { $u = require_auth(); CardsController::create($u['id']); }

// 404
json_response(['error' => 'Ruta no encontrada'], 404);
